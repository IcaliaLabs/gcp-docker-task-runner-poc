#!/usr/bin/env ruby

require 'bundler/setup' # Set up gems listed in the Gemfile.

require 'google/cloud/pubsub'

require 'logger'

require 'byebug'
require 'docker'
require 'securerandom'

module MyLogger
  LOGGER = Logger.new(STDOUT)
  def logger
    LOGGER
  end
end

# Define a gRPC module-level logger method before grpc/logconfig.rb loads.
module GRPC
  extend MyLogger
end

def logger
  MyLogger::LOGGER
end

TIMEOUT_IN_SECONDS = ENV.fetch('CONTAINER_TIMEOUT_SECONDS', '1200').freeze

def do_some_work
  container_image = Docker::Image.create fromImage: 'docker:stable'

  container_opts = {
    Binds: [ '/var/run/docker.sock:/var/run/docker.sock' ],
    Labels: { 'com.icalialabs.demo': 'true' }
  }
  
  container = Docker::Container.create container_opts.merge(
    name: "hello-world-launcher-#{SecureRandom.uuid}",
    Image: container_image.id,
    Cmd: %w[docker run hello-world]
  )

  container.start!
  container.wait(TIMEOUT_IN_SECONDS.to_i)
rescue => e
  logger.error "ERROR: #{e.inspect}"
  raise
end

logger.info "Connecting to PubSub..."
pubsub = Google::Cloud::PubSub.new

topic_name = 'example-topic'

my_topic = pubsub.topic(topic_name) || pubsub.new_topic(topic_name)

subscription_name = 'example-topic-subscription'
# Retrieve a subscription
sub = my_topic.subscription(subscription_name) || my_topic.subscribe(subscription_name)

# Create a subscriber to listen for available messages
logger.info "Start listening..."
subscriber = sub.listen do |received_message|
  logger.info "= Received message: #{received_message.inspect}"
  do_some_work
  # process message
  received_message.acknowledge!
end

subscriber.on_error do |error|
  logger.error "Error: #{error.inspect}"
end

# Start background threads that will call the block passed to listen.
subscriber.start

# Fade into a deep sleep as worker will run indefinitely
sleep

# Shut down the subscriber when ready to stop receiving messages.
# subscriber.stop.wait!
